// Copyright (C) 2002-2006 Nikolaus Gebhardt, Josh Turpen
// This file is part of the "Irrlicht Engine".
// For conditions of distribution and use, see copyright notice in irrlicht.h

$#include "IrrLuaSpriteSkin.h"
$pfile "../../pkg/irrTypes.pkg"
$pfile "../../pkg/IGUISkin.pkg"

namespace irr
{
namespace gui
{
	
	enum EGUI_ELEMENT_IMAGE_TYPE
	{
		EGEIT_BUTTON_PANE_STANDARD,
		EGEIT_BUTTON_PANE_PRESSED,
		EGEIT_SUNKEN_PANE_FLAT,
		EGEIT_SUNKEN_PANE_SUNKEN,
		EGEIT_WINDOW_BACKGROUND,
		EGEIT_WINDOW_BACKGROUND_TITLEBAR,
		EGEIT_MENU_PANE,
		EGEIT_TOOLBAR,
		EGEIT_TAB_BUTTON,
		EGEIT_TAB_BODY,
		EGEIT_COUNT
	};
	


	class CAnimatedSpriteSkin : public irr::gui::IGUISkin
	{
	public:

		CAnimatedSpriteSkin(irr::video::IVideoDriver* driver, irr::scene::ISceneManager *scm, irr::ITimer *timer);

		//! destructor
		~CAnimatedSpriteSkin();

		//! loads the image file into the element type
		bool Load(irr::gui::EGUI_ELEMENT_IMAGE_TYPE Type, std::string filename, s32 Ax,s32 Ay,s32 Aw,s32 Ah,s32 frmWidth,s32 frmHeight,bool useClrKey);		

		s32 getAnimationSpeed(irr::gui::EGUI_ELEMENT_IMAGE_TYPE Type);
		void setAnimationSpeed(irr::gui::EGUI_ELEMENT_IMAGE_TYPE Type, s32 spd);

		void setLoop(irr::gui::EGUI_ELEMENT_IMAGE_TYPE Type, bool l);
		bool getLoop(irr::gui::EGUI_ELEMENT_IMAGE_TYPE Type);

		void playForward(irr::gui::EGUI_ELEMENT_IMAGE_TYPE Type);
		void playBackward(irr::gui::EGUI_ELEMENT_IMAGE_TYPE Type);

		void resetAnimation(irr::gui::EGUI_ELEMENT_IMAGE_TYPE Type);

		//! returns default color
		irr::video::SColor getColor(irr::gui::EGUI_DEFAULT_COLOR color);

		//! sets a default color
		void setColor(irr::gui::EGUI_DEFAULT_COLOR which, irr::video::SColor newColor);

		//! returns default color
		s32 getSize(irr::gui::EGUI_DEFAULT_SIZE size);

		//! sets a default size
		void setSize(irr::gui::EGUI_DEFAULT_SIZE which, s32 size);

		//! returns the default font
		irr::gui::IGUIFont* getFont();

		//! sets a default font
		void setFont(irr::gui::IGUIFont* font);

		//! Returns a default text.
		/** For example for Message box button captions:
		 "OK", "Cancel", "Yes", "No" and so on. */
		wchar_t* getDefaultText(irr::gui::EGUI_DEFAULT_TEXT text);

		//! Sets a default text. 
		/** For example for Message box button captions:
		 "OK", "Cancel", "Yes", "No" and so on. */
		void setDefaultText(irr::gui::EGUI_DEFAULT_TEXT which, wchar_t* newText);

		//! draws a standard 3d button pane
		/**	Used for drawing for example buttons in normal state. 
		It uses the colors EGDC_3D_DARK_SHADOW, EGDC_3D_HIGH_LIGHT, EGDC_3D_SHADOW and
		EGDC_3D_FACE for this. See EGUI_DEFAULT_COLOR for details. 
		\param rect: Defining area where to draw.
		\param clip: Clip area.
		\param element: Pointer to the element which whiches to draw this. This parameter
		is usually not used by ISkin, but can be used for example by more complex 
		implementations to find out how to draw the part exactly. */
		void draw3DButtonPaneStandard(irr::gui::IGUIElement* element, 
			irr::core::rect<s32>& rect,
			irr::core::rect<s32>* clip);

		//! draws a pressed 3d button pane
		/**	Used for drawing for example buttons in pressed state. 
		It uses the colors EGDC_3D_DARK_SHADOW, EGDC_3D_HIGH_LIGHT, EGDC_3D_SHADOW and
		EGDC_3D_FACE for this. See EGUI_DEFAULT_COLOR for details. 
		\param rect: Defining area where to draw.
		\param clip: Clip area.
		\param element: Pointer to the element which whiches to draw this. This parameter
		is usually not used by ISkin, but can be used for example by more complex 
		implementations to find out how to draw the part exactly. */
		void draw3DButtonPanePressed(irr::gui::IGUIElement* element, 
			irr::core::rect<s32>& rect,
			irr::core::rect<s32>* clip);

		//! draws a sunken 3d pane
		/** Used for drawing the background of edit, combo or check boxes.
		\param element: Pointer to the element which whiches to draw this. This parameter
		is usually not used by ISkin, but can be used for example by more complex 
		implementations to find out how to draw the part exactly. 
		\param bgcolor: Background color.
		\param flat: Specifies if the sunken pane should be flat or displayed as sunken 
		 deep into the ground.
		\param rect: Defining area where to draw.
		\param clip: Clip area.	*/
		void draw3DSunkenPane(irr::gui::IGUIElement* element,
			irr::video::SColor bgcolor, bool flat, bool fillBackGround,
			irr::core::rect<s32>& rect,
			irr::core::rect<s32>* clip);

		//! draws a window background
		/** Used for drawing the background of dialogs and windows.
		\param element: Pointer to the element which whiches to draw this. This parameter
		is usually not used by ISkin, but can be used for example by more complex 
		implementations to find out how to draw the part exactly. 
		\param titleBarColor: Title color.
		\param drawTitleBar: True to enable title drawing.
		\param rect: Defining area where to draw.
		\param clip: Clip area.
		\return Returns rect where to draw title bar text. */
		irr::core::rect<s32> draw3DWindowBackground(irr::gui::IGUIElement* element,
			bool drawTitleBar, irr::video::SColor titleBarColor,
			irr::core::rect<s32>& rect,
			irr::core::rect<s32>* clip);

		//! draws a standard 3d menu pane
		/**	Used for drawing for menus and context menus. 
		It uses the colors EGDC_3D_DARK_SHADOW, EGDC_3D_HIGH_LIGHT, EGDC_3D_SHADOW and
		EGDC_3D_FACE for this. See EGUI_DEFAULT_COLOR for details. 
		\param element: Pointer to the element which whiches to draw this. This parameter
		is usually not used by ISkin, but can be used for example by more complex 
		implementations to find out how to draw the part exactly. 
		\param rect: Defining area where to draw.
		\param clip: Clip area.	*/
		void draw3DMenuPane(irr::gui::IGUIElement* element,
			irr::core::rect<s32>& rect,
			irr::core::rect<s32>* clip);

		//! draws a standard 3d tool bar
		/**	Used for drawing for toolbars and menus.
		\param element: Pointer to the element which whiches to draw this. This parameter
		is usually not used by ISkin, but can be used for example by more complex 
		implementations to find out how to draw the part exactly. 
		\param rect: Defining area where to draw.
		\param clip: Clip area.	*/
		void draw3DToolBar(irr::gui::IGUIElement* element,
			irr::core::rect<s32>& rect,
			irr::core::rect<s32>* clip);

		//! draws a tab button
		/**	Used for drawing for tab buttons on top of tabs.
		\param element: Pointer to the element which whiches to draw this. This parameter
		is usually not used by ISkin, but can be used for example by more complex 
		implementations to find out how to draw the part exactly. 
		\param active: Specifies if the tab is currently active.
		\param rect: Defining area where to draw.
		\param clip: Clip area.	*/
		void draw3DTabButton(irr::gui::IGUIElement* element, bool active,
			irr::core::rect<s32>& rect, irr::core::rect<s32>* clip);

		//! draws a tab control body
		/**	\param element: Pointer to the element which whiches to draw this. This parameter
		is usually not used by ISkin, but can be used for example by more complex 
		implementations to find out how to draw the part exactly. 
		\param border: Specifies if the border should be drawn.
		\param background: Specifies if the background should be drawn.
		\param rect: Defining area where to draw.
		\param clip: Clip area.	*/
		void draw3DTabBody(irr::gui::IGUIElement* element, bool border, bool background,
			irr::core::rect<s32>& rect, irr::core::rect<s32>* clip);

	};

	irr::gui::CAnimatedSpriteSkin *createAnimatedSpriteSkin(irr::video::IVideoDriver *Driver, irr::scene::ISceneManager *Manager, irr::ITimer *Timer);
} 
} 


