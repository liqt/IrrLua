// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h


namespace irr
{
namespace video
{

//! Enumeration for all vertex types there are.
enum E_VERTEX_TYPE
{
	//! Standard vertex type used by the Irrlicht engine.
	EVT_STANDARD = 0, 

	//! Vertex with two texture coordinates. Usually used for geometry with lightmaps
	//! or other special materials.
	EVT_2TCOORDS,

	//! Vertex with a tangent and binormal vector. Usually used for tangent space normal mapping.
	EVT_TANGENTS,
};

//! standard vertex used by the Irrlicht engine.
struct S3DVertex
{
	//! default constructor
	//S3DVertex();

	//! constructor
	S3DVertex(f32 x, f32 y, f32 z, f32 nx, f32 ny, f32 nz, SColor& c, f32 tu, f32 tv);

	//! constructor
	//S3DVertex(irr::core::vector3d<f32>& pos, irr::core::vector3d<f32>& normal,
	//	video::SColor& color, irr::core::vector2d<f32>& tcoords);

	//! Position
	irr::core::vector3d<f32> Pos;	
	
	//! Normal vector
	irr::core::vector3d<f32> Normal;	

	//! Color
	irr::video::SColor Color;				

	//! Texture coordinates
	irr::core::vector2d<f32> TCoords;	



	bool operator == (S3DVertex& other) ;

	//bool operator != (S3DVertex& other) ;
};


//! Vertex with two texture coordinates.
/** Usually used for geometry with lightmaps
or other special materials.
*/
struct S3DVertex2TCoords
{
	//! default constructor
	S3DVertex2TCoords();

	//! constructor
	S3DVertex2TCoords(f32 x, f32 y, f32 z, SColor c, f32 tu, f32 tv, f32 tu2, f32 tv2);

	bool operator == (irr::video::S3DVertex2TCoords& other);
	//bool operator != (irr::video::S3DVertex2TCoords& other);

	//! Position
	irr::core::vector3d<f32> Pos;		

	//! Normal
	irr::core::vector3d<f32> Normal;		

	//! Color
	SColor Color;				

	//! First set of texture coordinates
	irr::core::vector2d<f32> TCoords;	

	//! Second set of texture coordinates
	irr::core::vector2d<f32> TCoords2;	
};


//! Vertex with a tangent and binormal vector.
/**  Usually used for tangent space normal mapping.
*/
struct S3DVertexTangents
{
	//! default constructor
	S3DVertexTangents();

	//! constructor
	S3DVertexTangents(f32 x, f32 y, f32 z);

		//! constructor
	//S3DVertexTangents(irr::core::vector3d<f32>& pos, 
	//	irr::core::vector2d<f32>& tcoords,	video::SColor c);

	bool operator == (irr::video::S3DVertexTangents& other);
	//bool operator != (irr::video::S3DVertexTangents& other);

	//! Position
	irr::core::vector3d<f32> Pos;	

	//! Normal vector
	irr::core::vector3d<f32> Normal;	

	//! Color
	irr::video::SColor Color;		

	//! Texture coordinates
	irr::core::vector2d<f32> TCoords;

	//! Tangent vector along the x-axis of the texture
	irr::core::vector3d<f32> Tangent;	

	//! Binormal vector (tangent x normal)
	irr::core::vector3d<f32> Binormal;
};



} // end namespace video
} // end namespace irr

