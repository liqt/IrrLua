// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h



namespace irr
{
namespace scene
{

//! Interface for making multiple triangle selectors work as one big selector.
/** This is nothing more than a collection of one or more triangle selectors
providing together the interface of one triangle selector. In this way, 
collision tests can be done with different triangle soups in one pass.
*/
class IMetaTriangleSelector : public irr::scene::ITriangleSelector
{

	//! Adds a triangle selector to the collection of triangle selectors
	//! in this metaTriangleSelector.
	//! \param toAdd: Pointer to an triangle selector to add to the list.
	virtual void addTriangleSelector(ITriangleSelector* toAdd);

	//! Removes a specific triangle selector which was added before	from the collection.
	//! \param toRemove: Pointer to an triangle selector which is in the list
	//! but will be removed.
	//! \return Returns true if successful, false if not.
	virtual bool removeTriangleSelector(ITriangleSelector* toRemove);

	//! Removes all triangle selectors from the collection.
	virtual void removeAllTriangleSelectors();
	
	///////////////////////////////////////////////////////////////////
	// ITriangleSelector
	///////////////////////////////////////////////////////////////////
	
	//! Returns amount of all available triangles in this selector
	virtual s32 getTriangleCount();

	//! Gets all triangles.
	//! \param triangles: Array where the resulting triangles will be written to.
	//! \param arraySize: Size of the target array.
	//! \param outTriangleCount: Amount of triangles which have been written into the
	//! array.
	//! \param transform: Pointer to matrix for transforming the triangles before.
	//! they are returned. Useful for example to scale all triangles down into an
	//! ellipsoid space. If this pointer is null, no transformation will be done.
	virtual void getTriangles(irr::core::triangle3d<f32>* triangles, s32 arraySize,
		s32& outTriangleCount, irr::core::matrix4* transform);

	//! Gets all triangles which lie within a specific bounding box.
	//! Please note that unoptimized triangle selectors also may return triangles,
	//! which are not in the specific box at all.
	//! \param triangles: Array where the resulting triangles will be written to.
	//! \param arraySize: Size of the target array.
	//! \param outTriangleCount: Amount of triangles which have been written into the
	//! array.
	//! \param box: Only triangles which are in this axis aligned bounding box
	//! will be written into the array.
	//! \param transform: Pointer to matrix for transforming the triangles before.
	//! they are returned. Useful for example to scale all triangles down into an
	//! ellipsoid space. If this pointer is null, no transformation will be done.
	virtual void getTriangles(irr::core::triangle3d<f32>* triangles, s32 arraySize,
		s32& outTriangleCount, irr::core::aabbox3d<f32>& box, 
		irr::core::matrix4* transform);

	//! Gets all triangles which have or may have contact with a 3d line.
	//! Please note that unoptimized triangle selectors also may return triangles,
	//! which are not in contact at all with the 3d line.
	//! \param triangles: Array where the resulting triangles will be written to.
	//! \param arraySize: Size of the target array.
	//! \param outTriangleCount: Amount of triangles which have been written into the
	//! array.
	//! \param line: Only triangles which may be in contact with this 3d line will
	//! be written into the array.
	//! \param transform: Pointer to matrix for transforming the triangles before.
	//! they are returned. Useful for example to scale all triangles down into an
	//! ellipsoid space. If this pointer is null, no transformation will be done.
	virtual void getTriangles(irr::core::triangle3d<f32>* triangles, s32 arraySize,
		s32& outTriangleCount, irr::core::line3d<f32>& line, 
		irr::core::matrix4* transform);
		
	///////////////////////////////////////////////////////////////////////
	//IUnknown
	///////////////////////////////////////////////////////////////////////
	virtual void grab();
	virtual bool drop();
	virtual c8* getDebugName();		
};

} // end namespace scene
} // end namespace irr



