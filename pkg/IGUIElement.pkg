// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h

namespace irr
{
namespace gui
{

class IGUIEnvironment;

//! Base class of all GUI elements.
class IGUIElement : public irr::IUnknown, public irr::IEventReceiver
{
public:

	//! Constructor
	IGUIElement(irr::gui::EGUI_ELEMENT_TYPE type, irr::gui::IGUIEnvironment* environment, irr::gui::IGUIElement* parent, s32 id, irr::core::rect<s32> rectangle);


	//! Destructor
	~IGUIElement();


	//! Returns parent of this element.
	irr::gui::IGUIElement* getParent();


	//! Returns the relative rectangle of this element.
	irr::core::rect<s32> getRelativePosition();
	


	//! Sets the relative rectangle of this element.
	void setRelativePosition(irr::core::rect<s32>& r);


	//! Returns the absolute rectangle of element.
	irr::core::rect<s32> getAbsolutePosition();


	//! Updates the absolute position.
	void updateAbsolutePosition();
	


	//! Returns the child element, which is at the position of the point.
	irr::gui::IGUIElement* getElementFromPoint(irr::core::position2d<s32>& point);
	


	//! Adds a GUI element as new child of this element.
	void addChild(irr::gui::IGUIElement* child);
	


	//! Removes a child.
	void removeChild(irr::gui::IGUIElement* child);
	


	//! Removes this element.
	void remove();
	


	//! Draws the element and its children.
	void draw();
	


	//! Moves this element.
	void move(irr::core::position2d<s32> absoluteMovement);
	


	//! Returns true if element is visible.
	virtual bool isVisible();
	



	//! Sets the visible state of this element.
	void setVisible(bool visible);
	


	//! Returns true if element is enabled.
	bool isEnabled();
	


	//! Sets the enabled state of this element.
	void setEnabled(bool enabled);
	


	//! Sets the new caption of this element.
	void setText(wchar_t* text);
	


	//! Returns caption of this element.
	wchar_t* getText();
	


	//! Returns id. Can be used to identify the element.
	s32 getID();
	

	//! Sets the id of this element
	void setID(s32 id);
	



	//! Brings a child to front
	//! \return Returns true if successful, false if not.
	virtual bool bringToFront(irr::gui::IGUIElement* element);
	

	//! Returns list with children of this element
	//virtual irr::core::list<IGUIElement*>& getChildren();
	

	//! Finds the first element with the given id.
	//! \param id: Id to search for.
	//! \param searchchildren: Set this to true, if also children of this 
	//! element may contain the element with the searched id and they 
	//! should be searched too.
	//! \return Returns the first element with the given id. If no element
	//! with this id was found, 0 is returned.
	irr::gui::IGUIElement* getElementFromId(s32 id, bool searchchildren) ;
	
	irr::gui::EGUI_ELEMENT_TYPE getType();
	
	//////////////////////////////////////////////////
	//IEventReceiver
	///////////////////////////////////////////////////
	//! Called if an event happened.
	virtual bool OnEvent(irr::SEvent event);
	
	//////////////////////////////////////////////////////////////////////////////////////	
	//IUnknown
	//////////////////////////////////////////////////////////////////////////////////////
	
	virtual void grab();
	virtual bool drop();
	c8* getDebugName();

	
};


} // end namespace gui
} // end namespace irr

$[

local _setText = irr.gui.IGUIElement.setText
function irr.gui.IGUIElement:setText(text)
	text = text or ""
	local txt = irr.cast.to_wchar_t_ptr(text)
	_setText(self, txt)
	irr.cast.delete_wchar_t_ptr(txt)
end

local _getText = irr.gui.IGUIElement.getText
function irr.gui.IGUIElement:getText()
	local txt = _getText(self)
	if type(txt) == "string" then
		return txt
	end
	
	return irr.cast.wchar_t_ptr_to_std_string(txt)
end


$]

