// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h


namespace irr
{
namespace scene
{

	//! Simple implementation of the IAnimatedMesh interface.
	struct SAnimatedMesh : public IAnimatedMesh
	{
		//! constructor
		SAnimatedMesh();


		//! destructor
		~SAnimatedMesh();


		//! Gets the frame count of the animated mesh.
		//! \return Returns the amount of frames. If the amount is 1, it is a static, non animated mesh.
		virtual s32 getFrameCount();



		//! Returns the IMesh interface for a frame.
		//! \param frame: Frame number as zero based index. The maximum frame number is
		//! getFrameCount() - 1;
		//! \param detailLevel: Level of detail. 0 is the lowest,
		//! 255 the highest level of detail. Most meshes will ignore the detail level.
		//! \return Returns the animated mesh based on a detail level. 
		virtual IMesh* getMesh(s32 frame, s32 detailLevel, s32 startFrameLoop, s32 endFrameLoop);


		//! adds a Mesh
		void addMesh(IMesh* mesh);

        
		//! Returns an axis aligned bounding box of the mesh.
		//! \return A bounding box of this mesh is returned.
		virtual core::aabbox3d<f32>& getBoundingBox() ;

		void recalculateBoundingBox();
		


		//! Returns the type of the animated mesh.
		virtual E_ANIMATED_MESH_TYPE getMeshType() ;

		core::aabbox3d<f32> Box;
		core::array<IMesh*> Meshes;
		E_ANIMATED_MESH_TYPE Type;
		
		
		///////////////////////////////////////////////////////////////////////
		// IAnimatedMesh
		////////////////////////////////////////////////////////////////////////
		
		
				//! Gets the frame count of the animated mesh.
		//! \return Returns the amount of frames. If the amount is 1, it is a static, non animated mesh.
		virtual s32 getFrameCount();

		//! Returns the IMesh interface for a frame.
		//! \param frame: Frame number as zero based index. The maximum frame number is
		//! getFrameCount() - 1;
		//! \param detailLevel: Level of detail. 0 is the lowest,
		//! 255 the highest level of detail. Most meshes will ignore the detail level.
		//! \param startFrameLoop: Because some animated meshes (.MD2) are blended between 2
		//! static frames, and maybe animated in a loop, the startFrameLoop and the endFrameLoop
		//! have to be defined, to prevent the animation to be blended between frames which are
		//! outside of this loop. 
		//! If startFrameLoop and endFrameLoop are both -1, they are ignored.
		//! \param endFrameLoop: see startFrameLoop.
		//! \return Returns the animated mesh based on a detail level. 
		virtual irr::scene::IMesh* getMesh(s32 frame, s32 detailLevel, s32 startFrameLoop, s32 endFrameLoop);

		//! Returns an axis aligned bounding box of the mesh.
		//! \return A bounding box of this mesh is returned.
		virtual irr::core::aabbox3d<f32>& getBoundingBox();

		//! Returns the type of the animated mesh.
		//! In most cases it is not neccessary to use this method.
		//! This is useful for making a save downcast, for example
		//! if getMeshType() returns EAMT_MD2, its save to cast the
		//! IAnimatedMesh to IAnimatedMeshMD2.
		//! \returns Type of the mesh.
		virtual irr::scene::E_ANIMATED_MESH_TYPE getMeshType();		
		
		//////////////////////////////////////////////////////////////////////////////////////	
		//IUnknown
		//////////////////////////////////////////////////////////////////////////////////////
		
		virtual void grab();
		virtual bool drop();
		c8* getDebugName();

	};


} // end namespace scene
} // end namespace irr


