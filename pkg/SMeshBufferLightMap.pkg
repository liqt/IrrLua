// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h


namespace irr
{
namespace scene
{
	//! Simple implementation of the IMeshBuffer interface with S3DVertex2TCoords vertices.
	struct SMeshBufferLightMap : public irr::scene::IMeshBuffer
	{
		//! constructor
		SMeshBufferLightMap();

		//! destructor
		~SMeshBufferLightMap();

        //! returns the material of this meshbuffer
        virtual video::SMaterial& getMaterial() ;


		//! returns the material of this meshbuffer
        video::SMaterial& getMaterial();

		//! returns pointer to vertices
		virtual void* getVertices() ;

		//! returns pointer to vertices
		virtual void* getVertices();

		//! returns amount of vertices
		virtual s32 getVertexCount() ;

		//! returns pointer to Indices
		virtual u16* getIndices() ;

		//! returns pointer to Indices
		virtual u16* getIndices();

		//! returns amount of indices
		virtual s32 getIndexCount() ;

		//! returns an axis aligned bounding box
		virtual core::aabbox3d<f32>& getBoundingBox() ;

		//! returns an axis aligned bounding box
		virtual core::aabbox3d<f32>& getBoundingBox();

		//! recalculates the bounding box. should be called if the mesh changed.
		void recalculateBoundingBox();

		//! returns which type of vertex data is stored.
		virtual video::E_VERTEX_TYPE getVertexType() ;

		video::SMaterial Material;						//! material for this meshBuffer.
		core::array<video::S3DVertex2TCoords> Vertices;		//! Array of vertices
		core::array<u16> Indices;	//! Array of the Indices.
		core::aabbox3d<f32> BoundingBox;
		
		/////////////////////////////////////////////////////////////////////////////
		//IMeshBuffer
		/////////////////////////////////////////////////////////////////////////////
		//! returns the material of this meshbuffer
        virtual irr::video::SMaterial& getMaterial();

		//! returns the material of this meshbuffer
        virtual  irr::video::SMaterial& getMaterial() ;

		//! returns which type of vertex data is stored.
		virtual irr::video::E_VERTEX_TYPE getVertexType() ;

		//! returns pointer to vertex data. The data is a array of vertices. Which vertex
		//! type is used can be determinated with getVertexType().
		virtual  void* getVertices() ; 

		//! returns pointer to vertex data. The data is a array of vertices. Which vertex
		//! type is used can be determinated with getVertexType().
		virtual void* getVertices(); 

		//! returns amount of vertices
		virtual s32 getVertexCount() ;

		//! returns pointer to Indices
		virtual  u16* getIndices() ;

		//! returns pointer to Indices
		virtual u16* getIndices();

		//! returns amount of indices
		virtual s32 getIndexCount() ;

		//! returns an axis aligned bounding box
		virtual  irr::core::aabbox3d<f32>& getBoundingBox() ;

		//! returns an axis aligned bounding box
		virtual irr::core::aabbox3d<f32>& getBoundingBox();
		
		//////////////////////////////////////////////////////////////////////////////////////	
		//IUnknown
		//////////////////////////////////////////////////////////////////////////////////////
		
		virtual void grab();
		virtual bool drop();
		c8* getDebugName();
	};

} // end namespace scene
} // end namespace irr


