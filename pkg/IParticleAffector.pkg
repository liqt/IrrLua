// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h


namespace irr
{
namespace scene
{
//! Types of built in particle affectors
enum E_PARTICLE_AFFECTOR_TYPE
{
	EPAT_NONE = 0,
	EPAT_FADE_OUT,
	EPAT_GRAVITY,
	EPAT_COUNT
};



//! A particle affector modifies particles.
class IParticleAffector : public irr::IUnknown
{

	//! Affects an array of particles.
	//! \param now: Current time. (Same as ITimer::getTime() would return)
	//! \param particlearray: Array of particles.
	//! \param count: Amount of particles in array.
	virtual void affect(u32 now, irr::scene::SParticle* particlearray, u32 count);

	//! Writes attributes of the object.
	//! Implement this to expose the attributes of your scene node animator for 
	//! scripting languages, editors, debuggers or xml serialization purposes.
	virtual void serializeAttributes(irr::io::IAttributes* out, irr::io::SAttributeReadWriteOptions* options);

	//! Reads attributes of the object.
	//! Implement this to set the attributes of your scene node animator for 
	//! scripting languages, editors, debuggers or xml deserialization purposes.
	//! \param startIndex: start index where to start reading attributes.
	//! \return: returns last index of an attribute read by this affector
	virtual s32 deserializeAttributes(s32 startIndex, irr::io::IAttributes* in, irr::io::SAttributeReadWriteOptions* options);

	//! Get emitter type
	virtual irr::scene::E_PARTICLE_AFFECTOR_TYPE getType();


	///////////////////////////////////////////////////////////////////////
	//IUnknown
	///////////////////////////////////////////////////////////////////////
	virtual void grab();
	virtual bool drop();
	virtual c8* getDebugName();	
};

} // end namespace scene
} // end namespace irr

$[

irr.scene.ParticleAffectorTypeNames = {"None", "Fadeout", "Gravity"}

$]

