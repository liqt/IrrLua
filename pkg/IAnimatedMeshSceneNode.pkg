// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h


namespace irr
{
namespace scene
{
	class IAnimatedMeshSceneNode;

	//! Callback interface for catching events of ended animations.
	/** Implement this interface and use 
	 IAnimatedMeshSceneNode::setAnimationEndCallback to be able to
	 be notified if an animation playback has ended.
	**/
	class IAnimationEndCallBack : public irr::IUnknown
	{
	public:

		//! Will be called when the animation playback has ended.
		//! See IAnimatedMeshSceneNode::setAnimationEndCallback for 
		//! more informations.
		//! \param node: Node of which the animation has ended.
		virtual void OnAnimationEnd(irr::scene::IAnimatedMeshSceneNode* node);
	};

	//! Scene node capable of displaying an animated mesh and its shadow.
	/** The shadow is optional: If a shadow should be displayed too, just invoke
	the IAnimatedMeshSceneNode::createShadowVolumeSceneNode().*/
	class IAnimatedMeshSceneNode : public irr::scene::ISceneNode
	{
	public:

		//! Constructor
/*
		IAnimatedMeshSceneNode(ISceneNode* parent, ISceneManager* mgr, s32 id,
			core::vector3d<f32>& position ,
			core::vector3d<f32>& rotation ,
			core::vector3d<f32>& scale );
*/

		//! Destructor
		virtual ~IAnimatedMeshSceneNode();

		//! Sets the current frame number. 
		//! From now on the animation is played from this frame. 
		//! \param frame: Number of the frame to let the animation be started from.
		//! The frame number must be a valid frame number of the IMesh used by this 
		//! scene node. Set IAnimatedMesh::getMesh() for details.
		virtual void setCurrentFrame(s32 frame);

		//! Sets the frame numbers between the animation is looped.
		//! The default is 0 - MaximalFrameCount of the mesh.
		//! \param begin: Start frame number of the loop.
		//! \param end: End frame number of the loop.
		//! \return Returns true if successful, false if not.
		virtual bool setFrameLoop(s32 begin, s32 end);


		//! Sets the speed with witch the animation is played.
		//! \param framesPerSecond: Frames per second played.
		virtual void setAnimationSpeed(s32 framesPerSecond);

		//! Creates shadow volume scene node as child of this node
		//! and returns a pointer to it.  The shadow can be rendered using the ZPass
		//! or the zfail method. ZPass is a little bit faster because the shadow volume
		//! creation is easier, but with this method there occur ugly looking artifacs
		//! when the camera is inside the shadow volume. These error do not occur
		//! with the ZFail method.
		//! \param id: Id of the shadow scene node. This id can be used to identify
		//! the node later.
		//! \param zfailmethod: If set to true, the shadow will use the zfail method,
		//! if not, zpass is used. 
		//! \param intinity: Value used by the shadow volume algorithm to scale the 
		//! shadow volume. 
		//! \return Returns pointer to the created shadow scene node.
		//! This pointer should not be dropped. See IUnknown::drop() for more information.
		virtual irr::scene::IShadowVolumeSceneNode* addShadowVolumeSceneNode(s32 id, bool zfailmethod, f32 infinity);

		//! Returns a pointer to a child node, wich has the same transformation as 
		//! the corrsesponding joint, if the mesh in this scene node is a ms3d mesh.
		//! Otherwise 0 is returned. With this method it is possible to
		//! attach scene nodes to joints more easily. In this way, it is
		//! for example possible to attach a weapon to the left hand of an
		//! animated model. This example shows how:
		//! \code
		//! ISceneNode* hand = 
		//!		yourMS3DAnimatedMeshSceneNode->getMS3DJointNode("LeftHand");
		//! hand->addChild(weaponSceneNode);
		//! \endcode
		//! Please note that the SceneNode returned by this method may not exist
		//! before this call and is created by it.
		//! \param jointName: Name of the joint.
		//! \return Returns a pointer to the scene node which represents the joint
		//! with the specified name. Returns 0 if the contained mesh is not an
		//! ms3d mesh or the name of the joint could not be found.
		virtual irr::scene::ISceneNode* getMS3DJointNode(c8* jointName);

		//! Returns a pointer to a child node, wich has the same transformation as 
		//! the corrsesponding joint, if the mesh in this scene node is a x mesh.
		//! Otherwise 0 is returned. With this method it is possible to
		//! attach scene nodes to joints more easily. In this way, it is
		//! for example possible to attach a weapon to the left hand of an
		//! animated model. This example shows how:
		//! \code
		//! ISceneNode* hand = 
		//!		yourMS3DAnimatedMeshSceneNode->getXJointNode("LeftHand");
		//! hand->addChild(weaponSceneNode);
		//! \endcode
		//! Please note that the SceneNode returned by this method may not exist
		//! before this call and is created by it.
		//! \param jointName: Name of the joint.
		//! \return Returns a pointer to the scene node which represents the joint
		//! with the specified name. Returns 0 if the contained mesh is not an
		//! ms3d mesh or the name of the joint could not be found.
		virtual irr::scene::ISceneNode* getXJointNode(c8* jointName);


		//! Starts a default MD2 animation. 
		//! With this method it is easily possible to start a Run, Attack,
		//! Die or whatever animation, if the mesh contained in this scene
		//! node is a md2 mesh. Otherwise, nothing happenes.
		//! \param anim: An MD2 animation type, which should be played, for
		//! example EMAT_STAND for the standing animation.
		//! \return Returns true if successful, and false if not, for example
		//! if the mesh in the scene node is not a md2 mesh.
		virtual bool setMD2Animation(irr::scene::EMD2_ANIMATION_TYPE anim);

		//! Starts a special MD2 animation. 
		//! With this method it is easily possible to start a Run, Attack,
		//! Die or whatever animation, if the mesh contained in this scene
		//! node is a md2 mesh. Otherwise, nothing happenes. This method uses
		//! a character string to identify the animation. If the animation is a
		//! standard md2 animation, you might want to start this animation
		//! with the EMD2_ANIMATION_TYPE enumeraition instead.
		//! \param animationName: Name of the animation which should be played.
        //! \return Returns true if successful, and false if not, for example
		//! if the mesh in the scene node is not a md2 mesh, or no animation
		//! with this name could be found.
		//virtual bool setMD2Animation(c8* animationName);

		//! Returns the current displayed frame number.
		virtual s32 getFrameNr();

		//! Sets looping mode which is on by default. If set to false,
		//! animations will not be played looped.
		virtual void setLoopMode(bool playAnimationLooped);

		//! Sets a callback interface which will be called if an animation
		//! playback has ended. Set this to 0 to disable the callback again.
		//! Please note that this will only be called when in non looped mode,
		//! see IAnimatedMeshSceneNode::setLoopMode().
		virtual void setAnimationEndCallback(irr::scene::IAnimationEndCallBack* callback);

		//! Sets if the scene node should not copy the materials of the mesh but use them in a read only style.
		/* In this way it is possible to change the materials a mesh causing all mesh scene nodes 
		referencing this mesh to change too. */
		virtual void setReadOnlyMaterials(bool readonly); 

		//! Returns if the scene node should not copy the materials of the mesh but use them in a read only style
		virtual bool isReadOnlyMaterials();

		//! Sets a new mesh
		virtual void setMesh(irr::scene::IAnimatedMesh* mesh);


		////////////////////////////////////////////////////////////////////////////////////////////
		// ISceneNode
		////////////////////////////////////////////////////////////////////////////////////////////

		//! This method is called just before the rendering process of the whole scene.
		//! Nodes may register themselves in the render pipeline during this call,
		//! precalculate the geometry which should be renderered, and prevent their
		//! children from being able to register them selfes if they are clipped by simply
		//! not calling their OnPreRender-Method.
		virtual void OnPreRender();


		//! OnPostRender() is called just after rendering the whole scene.
		//! Nodes may calculate or store animations here, and may do other useful things,
		//! dependent on what they are.
		//! \param timeMs: Current time in milli seconds.
		virtual void OnPostRender(u32 timeMs);


		//! Renders the node.
		virtual void render();


		//! Returns the name of the node.
		//! \return Returns name as wide character string.
		virtual c8* getName();


		//! Sets the name of the node.
		//! \param name: New name of the scene node.
		virtual void setName(c8* name);


		//! Returns the axis aligned, not transformed bounding box of this node.
		//! This means that if this node is a animated 3d character, moving in a room,
		//! the bounding box will always be around the origin. To get the box in
		//! real world coordinates, just transform it with the matrix you receive with
		//! getAbsoluteTransformation() or simply use getTransformedBoundingBox(),
		//! which does the same.
		virtual irr::core::aabbox3d<f32>& getBoundingBox();


		//! Returns the axis aligned, transformed and animated absolute bounding box
		//! of this node.
		irr::core::aabbox3d<f32> getTransformedBoundingBox();
		

		//! returns the absolute transformation of the node. Is recalculated every OnPostRender()-call.
		irr::core::matrix4& getAbsoluteTransformation();


		//! Returns the relative transformation of the scene node.
		//! The relative transformation is stored internally as 3 vectors:
		//! translation, rotation and scale. To get the relative transformation
		//! matrix, it is calculated from these values.
		//! \return Returns the relative transformation matrix.
		virtual irr::core::matrix4 getRelativeTransformation();


		//! Returns true if the node is visible. This is only an option, set by the user and has
		//! nothing to do with geometry culling
		virtual bool isVisible();


		//! Sets if the node should be visible or not. All children of this node won't be visible too.
		virtual void setVisible(bool isVisible);


		//! Returns the id of the scene node. This id can be used to identify the node.
		virtual s32 getID();


		//! sets the id of the scene node. This id can be used to identify the node.
		virtual void setID(s32 id);


		//! Adds a child to this scene node. If the scene node already
		//! has got a parent, it is removed from there as child.
		virtual void addChild(irr::scene::ISceneNode* child);


		//! Removes a child from this scene node.
		//! \return Returns true if the child could be removed, and false if not.
		virtual bool removeChild(irr::scene::ISceneNode* child);


		//! Removes all children of this scene node
		virtual void removeAll();
		

		//! Removes this scene node from the scene, deleting it.
		virtual void remove();
		

		//! Adds an animator which should animate this node.
		virtual void addAnimator(irr::scene::ISceneNodeAnimator* animator);



		//! Removes an animator from this scene node.
		virtual void removeAnimator(irr::scene::ISceneNodeAnimator* animator);
		


		//! Removes all animators from this scene node.
		virtual void removeAnimators();
		


		//! Returns the material based on the zero based index i. To get the amount
		//! of materials used by this scene node, use getMaterialCount().
		//! This function is needed for inserting the node into the scene hirachy on a
		//! optimal position for minimizing renderstate changes, but can also be used
		//! to directly modify the material of a scene node.
		//! \param i: Zero based index i. The maximal value for this may be getMaterialCount() - 1.
		//! \return Returns the material of that index.
		virtual irr::video::SMaterial& getMaterial(s32 i);


		//! Returns amount of materials used by this scene node.
		//! \return Returns current count of materials used by this scene node.
		virtual s32 getMaterialCount();
		

		//! Sets all material flags at once to a new value. Helpful for
		//! example, if you want to be the the whole mesh to be lighted by 
		//! \param flag: Which flag of all materials to be set.
		//! \param newvalue: New value of the flag.
		void setMaterialFlag(irr::video::E_MATERIAL_FLAG flag, bool newvalue);
		


		//! Sets the texture of the specified layer in all materials of this
		//! scene node to the new texture.
		//! \param textureLayer: Layer of texture to be set. Must be a value greater or
		//! equal than 0 and smaller than MATERIAL_MAX_TEXTURES.
		//! \param texture: Texture to be used.
		void setMaterialTexture(s32 textureLayer, irr::video::ITexture* texture);
		

			
		//! Sets the material type of all materials s32 this scene node
		//! to a new material type.
		//! \param newType: New type of material to be set.
		void setMaterialType(irr::video::E_MATERIAL_TYPE newType);
			


		//! Gets the scale of the scene node. 
		//! \return Returns the scale of the scene node.
		virtual irr::core::vector3d<f32> getScale();


		//! Sets the scale of the scene node. 
		//! \param scale: New scale of the node
		virtual void setScale(irr::core::vector3d<f32>& scale);


		//! Sets the rotation of the node. Note that this is
		//! the relative rotation of the node.
		//! \return Current relative rotation of the scene node.
		virtual irr::core::vector3d<f32> getRotation();


		//! Sets the rotation of the node. This only modifies
		//! the relative rotation of the node.
		//! \param roation: New rotation of the node in degrees.
		//virtual void setRotation(const core::vector3df& rotation);
		virtual void setRotation(irr::core::vector3d<f32>& rotation);


		//! Gets the position of the node. Note that the position is
		//! relative to the parent.
		//! \return Returns the current position of the node relative to the parent.
		//virtual vector3df getPosition();
		virtual irr::core::vector3d<f32> getPosition();
		

		//! Sets the position of the node. Note that the position is
		//! relative to the parent.
		//! \param newpos: New relative postition of the scene node.
		//virtual void setPosition(const core::vector3df& newpos);
		virtual void setPosition(irr::core::vector3d<f32>& newpos);


		//! Gets the abolute position of the node. The position is absolute.
		//! \return Returns the current absolute position of the scene node.
		virtual irr::core::vector3d<f32> getAbsolutePosition();


		//! Enables or disables automatic culling based on the bounding
		//! box. Automatic culling is enabled by default. Note that not
		//! all SceneNodes support culling (the billboard scene node for example)
		//! and that some nodes always cull their geometry because it is their
		//! only reason for existance, for example the OctreeSceneNode.
		//! \param enabled: If true, automatic culling is enabled.
		//! If false, it is disabled.
		void setAutomaticCulling(bool enabled);


		//! Gets the automatic culling state. 
		//! \return The node is culled based on its bounding box if this method
		//! returns true, otherwise no culling is performed.
		bool getAutomaticCulling();


		//! Sets if debug data like bounding boxes should be drawed.
		//! Please note that not all scene nodes support this feature.
		void setDebugDataVisible(bool visible);
		

		//! Returns if debug data like bounding boxes are drawed.
		bool isDebugDataVisible();
		


		//! Returns a const reference to the list of all children.
		//irr::core::list<ISceneNode*>& getChildren();
		


		//! Changes the parent of the scene node.
		virtual void setParent(irr::scene::ISceneNode* newParent);
		


		//! Returns the triangle selector attached to this scene node.
		//! The Selector can be used by the engine for doing collision
		//! detection. You can create a TriangleSelector with 
		//! ISceneManager::createTriangleSelector() or 
		//! ISceneManager::createOctTreeTriangleSelector and set it with
		//! ISceneNode::setTriangleSelector(). If a scene node got no triangle
		//! selector, but collision tests should be done with it, a triangle
		//! selector is created using the bounding box of the scene node.
		//! \return Returns a pointer to the TriangleSelector or NULL, if there
		//! is none.
		virtual irr::scene::ITriangleSelector* getTriangleSelector();
		


		//! Sets the triangle selector of the scene node. The Selector can be
		//! used by the engine for doing collision detection. You can create a
		//! TriangleSelector with ISceneManager::createTriangleSelector() or 
		//! ISceneManager::createOctTreeTriangleSelector(). Some nodes may
		//! create their own selector by default, so it would be good to
		//! check if there is already a selector in this node by calling
		//! ISceneNode::getTriangleSelector(). 
		//! \param selector: New triangle selector for this scene node.
		virtual void setTriangleSelector(irr::scene::ITriangleSelector* selector);
		

		//! updates the absolute position based on the relative and the parents position
		virtual void updateAbsolutePosition();
		
		
		//! Returns the parent of this scene node
		irr::scene::ISceneNode* getParent();
		//////////////////////////////////////////////////////////////////////////////////////	
		//IUnknown
		//////////////////////////////////////////////////////////////////////////////////////
		
		virtual void grab();
		virtual bool drop();
		c8* getDebugName();


	};

} // end namespace scene
} // end namespace irr

$[

local _addShadowVolumeSceneNode = irr.scene.IAnimatedMeshSceneNode.addShadowVolumeSceneNode
function irr.scene.IAnimatedMeshSceneNode:addShadowVolumeSceneNode(id, zfailmethod, zinfinity)
	id = id or -1
	if zfailmethod == nil then zfailmethod = true end
	zinfinity = zinfinity or 10000
	return _addShadowVolumeSceneNode(self, id, zfailmethod, zinfinity)
end

$]

