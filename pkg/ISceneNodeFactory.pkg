// Copyright (C) 2002-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the "Irrlicht Engine".
// For conditions of distribution and use, see copyright notice in irrlicht.h

namespace irr
{
namespace scene
{
	
	//!	Interface making it possible to dynamicly create scene nodes 
	/** To be able to add custom scene nodes to Irrlicht and to make it possible for the 
	scene manager to save and load those external scene nodes, simply implement this
	interface and register it in you scene manager via ISceneManager::registerSceneNodeFactory.
	Note: When implementing your own scene node factory, don't call ISceneNodeManager::grab() to
	increase the reference counter of the scene node manager. This is not necessary because the
	scene node manager will grab() the factory anyway, and otherwise cyclic references will
	be created and the scene manager and all its nodes won't get deallocated.
	*/
	class ISceneNodeFactory : public irr::IUnknown
	{
	public:

		//! adds a scene node to the scene graph based on its type id
		/** \param type: Type of the scene node to add.
		\param parent: Parent scene node of the new node, can be null to add the scene node to the root.
		\return Returns pointer to the new scene node or null if not successful. */
		virtual irr::scene::ISceneNode* addSceneNode(irr::scene::ESCENE_NODE_TYPE type, irr::scene::ISceneNode* parent);

		//! adds a scene node to the scene graph based on its type name
		/** \param typeName: Type name of the scene node to add.
		\param parent: Parent scene node of the new node, can be null to add the scene node to the root.
		\return Returns pointer to the new scene node or null if not successful. */
		virtual irr::scene::ISceneNode* addSceneNode(c8* typeName, irr::scene::ISceneNode* parent);

		//! returns amount of scene node types this factory is able to create
		virtual s32 getCreatableSceneNodeTypeCount();

			//! returns type of a createable scene node type
		/** \param idx: Index of scene node type in this factory. Must be a value between 0 and
		getCreatableSceneNodeTypeCount() */
		virtual irr::scene::ESCENE_NODE_TYPE getCreateableSceneNodeType(s32 idx);

		//! returns type name of a createable scene node type by index
		/** \param idx: Index of scene node type in this factory. Must be a value between 0 and
		getCreatableSceneNodeTypeCount() */
		virtual c8* getCreateableSceneNodeTypeName(s32 idx);

		//! returns type name of a createable scene node type 
		/** \param type: Type of scene node. 
		\return: Returns name of scene node type if this factory can create the type, otherwise 0. */
		virtual c8* getCreateableSceneNodeTypeName(irr::scene::ESCENE_NODE_TYPE type);
	};


} // end namespace scene
} // end namespace irr


$[

local _addSceneNode = irr.scene.ISceneNodeFactory.addSceneNode
function irr.scene.ISceneNodeFactory:addSceneNode(typeName, parent)
	local n = irr.cast.to_c8_ptr(typeName)
	local ret = _addSceneNode(self, n, parent)
	irr.cast.delete_c8_ptr(n)
	return ret
end
		
local _getCreateableSceneNodeTypeName = irr.scene.ISceneNodeFactory.getCreateableSceneNodeTypeName
function irr.scene.ISceneNodeFactory:getCreateableSceneNodeTypeName(a)
	return irr.cast.c8_ptr_to_std_string(_getCreateableSceneNodeTypeName(self, a))
end


$]

