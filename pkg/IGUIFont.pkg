// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h


namespace irr
{
namespace gui
{

//! Font interface.
class IGUIFont : public IUnknown
{
public:

	//! Destructor
	virtual ~IGUIFont();

	//! Draws an text and clips it to the specified rectangle if wanted
	//! \param text: Text to draw
	//! \param position: Ractangle spceifying position where to draw the text.
	//! \param color: Color of the text
	//! \param hcenter: Specifiies if the text should be centered horizontally into the rectangle.
	//! \param vcenter: Specifiies if the text should be centered vertically into the rectangle.
	//! \param clip: Optional pointer to a rectalgle against which the text will be clipped.
	//! If the pointer is null, no clipping will be done.
	virtual void draw(wchar_t* text, irr::core::rect<s32>& position, 
		irr::video::SColor color, bool hcenter, bool vcenter,
		irr::core::rect<s32>* clip);

	//! Calculates the dimension of a text.
	//! \return Returns width and height of the area covered by the text if it would be
	//! drawn.
	virtual irr::core::dimension2d<s32> getDimension(wchar_t* text);

	//! Calculates the index of the character in the text which is on a specific position.
	//! \param text: Text string.
	//! \param pixel_x: X pixel position of which the index of the character will be returned.
	//! \return Returns zero based index of the character in the text, and -1 if no no character
	//! is on this position. (=the text is too short).
	virtual s32 getCharacterFromPos(wchar_t* text, s32 pixel_x);
	
	//////////////////////////////////////////////////////////////////////////////////////	
	//IUnknown
	//////////////////////////////////////////////////////////////////////////////////////
	
	virtual void grab();
	virtual bool drop();
	c8* getDebugName();
};

} // end namespace gui
} // end namespace irr

$[

local _draw = irr.gui.IGUIFont.draw
function irr.gui.IGUIFont:draw(text, position, color, hcent, vcenter, clip)
	text = text or ""
	position = position or irr.core.position2d(0,0)
	color = color or irr.video.SColor(0,0,0,0)	
	local txt = irr.cast.to_wchar_t_ptr(text)
	local ret = _draw(self, txt, position, color, hcent, vcenter, clip)
	irr.cast.delete_wchar_t_ptr(txt)
	return ret
end

$]
