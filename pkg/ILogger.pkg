// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h

namespace irr
{

enum ELOG_LEVEL
{
	//! High log level, warnings, errors and important information
	//! texts are printed out.
	ELL_INFORMATION = 0,

	//! Default log level, warnings and errors are printed out
	ELL_WARNING,

	//! Low log level, only errors are printed into the log
	ELL_ERROR,

	//! Nothing is printed out to the log
	ELL_NONE
};


//! Interface for logging messages, warnings and errors
class ILogger : public irr::IUnknown
{
public:

	//! destructor
	virtual ~ILogger();

	//! Returns the current set log level.
	virtual irr::ELOG_LEVEL getLogLevel();

	//! Sets a new log level. With this value, texts which are sent to
	//! the logger are filtered out. For example setting this value to
	//! ELL_WARNING, only warnings and
	//! errors are printed out. Setting it to ELL_INFORMATION, which is
	//! the default setting, warnings,
	//! errors and informational texts are printed out.
	//! \param ll: new log level filter value.
	virtual void setLogLevel(irr::ELOG_LEVEL ll);

	//! Prints out a text into the log
	//! \param text: Text to print out.
	//! \param ll: Log level of the text. If the text is an error, set
	//! it to ELL_ERROR, if it is warning set it to ELL_WARNING, and if it
	//! is just an informational text, set it to ELL_INFORMATION. Texts are
	//! filtered with these levels. If you want to be a text displayed,
	//! independent on what level filter is set, use ELL_NONE.
	virtual void log(c8* text, irr::ELOG_LEVEL ll);

	//! Prints out a text into the log
	//! \param text: Text to print out.
	//! \param hint: Additional info. This string is added after a " :" to the
	//! string.
	//! \param ll: Log level of the text. If the text is an error, set
	//! it to ELL_ERROR, if it is warning set it to ELL_WARNING, and if it
	//! is just an informational text, set it to ELL_INFORMATION. Texts are
	//! filtered with these levels. If you want to be a text displayed,
	//! independent on what level filter is set, use ELL_NONE.
	//virtual void log(c8* text, c8* hint, ELOG_LEVEL ll);

	//! Prints out a text into the log
	//! \param text: Text to print out.
	//! \param hint: Additional info. This string is added after a " :" to the
	//! string.
	//! \param ll: Log level of the text. If the text is an error, set
	//! it to ELL_ERROR, if it is warning set it to ELL_WARNING, and if it
	//! is just an informational text, set it to ELL_INFORMATION. Texts are
	//! filtered with these levels. If you want to be a text displayed,
	//! independent on what level filter is set, use ELL_NONE.
	//virtual void log(wchar_t* text, wchar_t* hint, ELOG_LEVEL ll);


	//! Prints out a text into the log
	//! \param text: Text to print out.
	//! \param ll: Log level of the text. If the text is an error, set
	//! it to ELL_ERROR, if it is warning set it to ELL_WARNING, and if it
	//! is just an informational text, set it to ELL_INFORMATION. Texts are
	//! filtered with these levels. If you want to be a text displayed,
	//! independent on what level filter is set, use ELL_NONE.
	//virtual void log(wchar_t* text, ELOG_LEVEL ll);
	
	//////////////////////////////////////////////////////////////////////////////////////	
	//IUnknown
	//////////////////////////////////////////////////////////////////////////////////////
	
	virtual void grab();
	virtual bool drop();
	c8* getDebugName();	
};

} // end namespace


$[

local _log = irr.ILogger.log

function irr.ILogger:log(text, loglevel)
	loglevel = loglevel or irr.ELL_INFORMATION
	local txt = irr.cast.to_c8_ptr(text)
	local ret = _log(self, txt, loglevel)
	irr.cast.delete_c8_ptr(txt)
	return ret
end	

irr.ILogger.getDebugName = irr.IUnknown.getDebugName

$]

