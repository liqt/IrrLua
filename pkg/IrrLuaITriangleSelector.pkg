// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h


namespace irr
{
namespace scene
{

//! Interface to return triangles with specific properties.
/** Every ISceneNode may have a triangle selector, available with 
 ISceneNode::getTriangleScelector() or ISceneManager::createTriangleSelector.
 This is used for doing collision detection: For example if you know, that a collision may happened in the 
 area between (1,1,1) and (10,10,10), you can get all triangles of the
 scene node in this area with the ITriangleSelector easily and check every triangle
 if it collided. */
class IrrLuaITriangleSelector : public ITriangleSelector
{
public:

	IrrLuaITriangleSelector();
	~IrrLuaITriangleSelector();

	//! Returns amount of all available triangles in this selector
	virtual s32 getTriangleCount();

	//! Gets all triangles.
	//! \param triangles: Array where the resulting triangles will be written to.
	//! \param arraySize: Size of the target array.
	//! \param outTriangleCount: Amount of triangles which have been written into the
	//! array.
	//! \param transform: Pointer to matrix for transforming the triangles before.
	//! they are returned. Useful for example to scale all triangles down into an
	//! ellipsoid space. If this pointer is null, no transformation will be done.
	virtual void getTriangles(irr::core::triangle3d<f32>* triangles, s32 arraySize,
		s32& outTriangleCount, irr::core::matrix4* transform);

	//! Gets all triangles which lie within a specific bounding box.
	//! Please note that unoptimized triangle selectors also may return triangles,
	//! which are not in the specific box at all.
	//! \param triangles: Array where the resulting triangles will be written to.
	//! \param arraySize: Size of the target array.
	//! \param outTriangleCount: Amount of triangles which have been written into the
	//! array.
	//! \param box: Only triangles which are in this axis aligned bounding box
	//! will be written into the array.
	//! \param transform: Pointer to matrix for transforming the triangles before.
	//! they are returned. Useful for example to scale all triangles down into an
	//! ellipsoid space. If this pointer is null, no transformation will be done.
	virtual void getTriangles(irr::core::triangle3d<f32>* triangles, s32 arraySize,
		s32& outTriangleCount, irr::core::aabbox3d<f32>& box, 
		irr::core::matrix4* transform);

	//! Gets all triangles which have or may have contact with a 3d line.
	//! Please note that unoptimized triangle selectors also may return triangles,
	//! which are not in contact at all with the 3d line.
	//! \param triangles: Array where the resulting triangles will be written to.
	//! \param arraySize: Size of the target array.
	//! \param outTriangleCount: Amount of triangles which have been written into the
	//! array.
	//! \param line: Only triangles which may be in contact with this 3d line will
	//! be written into the array.
	//! \param transform: Pointer to matrix for transforming the triangles before.
	//! they are returned. Useful for example to scale all triangles down into an
	//! ellipsoid space. If this pointer is null, no transformation will be done.
	virtual void getTriangles(irr::core::triangle3d<f32>* triangles, s32 arraySize,
		s32& outTriangleCount, irr::core::line3d<f32>& line, 
		irr::core::matrix4* transform);
	
	//////////////////////////////////////////////////////////////////////////////////////	
	//IUnknown
	//////////////////////////////////////////////////////////////////////////////////////
	
	virtual void grab();
	virtual bool drop();
	c8* getDebugName();

	//////////////////
	// irrlua stuff
	void *GetProxy();
};

} // end namespace scene
} // end namespace irr


$[

irr.__itriangleselectorproxy = {}

function irr.scene.createITriangleSelector(def)
	local o = {}
	for i,v in pairs(def) do o[i] = v end
	o.__c_class = irr.scene.IrrLuaITriangleSelector:new()
	tolua.inherit(o, o.__c_class)
	tolua.takeownership(o)
	o.__index = function (t, k) return rawget(t,"__c_class")[k] end	
	setmetatable(o, o)	
	irr.__itriangleselectorproxy[o.__c_class:GetProxy()] = o
	return o
end


$]


