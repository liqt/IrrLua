// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h

namespace irr
{
namespace gui
{

	//! GUI element displaying an image.
	class IGUIImage : public irr::gui::IGUIElement
	{
	public:

		//! constructor
		//IGUIImage(IGUIEnvironment* environment, IGUIElement* parent, s32 id, core::rect<s32> rectangle);

		//! destructor
		~IGUIImage();

		//! sets an image
		virtual void setImage(irr::video::ITexture* image);

		//! sets if the image should use its alpha channel to draw itself
		virtual void setUseAlphaChannel(bool use);
		
				/////////////////////////////////////////////////////////
		/// IGUIElement
		/////////////////////////////////////////////////////////
		
		//! Returns parent of this element.
		irr::gui::IGUIElement* getParent();


		//! Returns the relative rectangle of this element.
		irr::core::rect<s32> getRelativePosition();
		


		//! Sets the relative rectangle of this element.
		void setRelativePosition(irr::core::rect<s32>& r);


		//! Returns the absolute rectangle of element.
		irr::core::rect<s32> getAbsolutePosition();


		//! Updates the absolute position.
		virtual void updateAbsolutePosition();
		


		//! Returns the child element, which is at the position of the point.
		irr::gui::IGUIElement* getElementFromPoint(irr::core::position2d<s32>& point);
		


		//! Adds a GUI element as new child of this element.
		virtual void addChild(irr::gui::IGUIElement* child);
		


		//! Removes a child.
		virtual void removeChild(irr::gui::IGUIElement* child);
		


		//! Removes this element.
		virtual void remove();
		


		//! Draws the element and its children.
		virtual void draw();
		


		//! Moves this element.
		virtual void move(irr::core::position2d<s32> absoluteMovement);
		


		//! Returns true if element is visible.
		virtual bool isVisible();
		



		//! Sets the visible state of this element.
		virtual void setVisible(bool visible);
		


		//! Returns true if element is enabled.
		virtual bool isEnabled();
		


		//! Sets the enabled state of this element.
		virtual void setEnabled(bool enabled);
		


		//! Sets the new caption of this element.
		virtual void setText(wchar_t* text);
		


		//! Returns caption of this element.
		virtual wchar_t* getText();
		


		//! Returns id. Can be used to identify the element.
		virtual s32 getID();
		

		//! Sets the id of this element
		virtual void setID(s32 id);
		


		//! Called if an event happened.
		virtual bool OnEvent(irr::SEvent event);
		


		//! Brings a child to front
		//! \return Returns true if successful, false if not.
		virtual bool bringToFront(irr::gui::IGUIElement* element);
		

		//! Returns list with children of this element
		//virtual irr::core::list<IGUIElement*>& getChildren();
		

		//! Finds the first element with the given id.
		//! \param id: Id to search for.
		//! \param searchchildren: Set this to true, if also children of this 
		//! element may contain the element with the searched id and they 
		//! should be searched too.
		//! \return Returns the first element with the given id. If no element
		//! with this id was found, 0 is returned.
		virtual irr::gui::IGUIElement* getElementFromId(s32 id, bool searchchildren) ;
		
		irr::gui::EGUI_ELEMENT_TYPE getType();
		//////////////////////////////////////////////////////////////////////////////////////	
		//IUnknown
		//////////////////////////////////////////////////////////////////////////////////////
		
		virtual void grab();
		virtual bool drop();
		c8* getDebugName();		

	};


} // end namespace gui
} // end namespace irr



$[

irr.gui.IGUIImage.setText = irr.gui.IGUIElement.setText
irr.gui.IGUIImage.getText = irr.gui.IGUIElement.getText

$]

