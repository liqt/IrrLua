// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h


namespace irr
{
namespace gui
{
	class IGUIFont;

	//! Default list box GUI element.
	class IGUIListBox : public irr::gui::IGUIElement
	{
	public:

		//! constructor
		//IGUIListBox(IGUIEnvironment* environment, IGUIElement* parent, s32 id, core::rect<s32> rectangle);

		//! destructor
		~IGUIListBox();

		//! returns amount of list items
		virtual s32 getItemCount();

		//! returns string of a list item. the may id be a value from 0 to itemCount-1
		virtual wchar_t* getListItem(s32 id);

		//! adds an list item, returns id of item
		virtual s32 addItem(wchar_t* text);

		//! adds an list item with an icon
		//! \param text Text of list entry
		//! \param icon Text of the Icon. This text can be for example one of the texts defined in
		//!  GUIIcons.h. 
		//! \return
		//! returns the id of the new created item
		virtual s32 addItem(wchar_t* text, wchar_t* icon);

		//! Sets the font which should be used as icon font. This font is set to the Irrlicht engine
		//! built-in-font by default. Icons can be displayed in front of every list item.
		//! An icon is a string, displayed with the icon font. When using the build-in-font of the
		//! Irrlicht engine as icon font, the icon strings defined in GUIIcons.h can be used.
		virtual void setIconFont(irr::gui::IGUIFont* font);

		//! clears the list, deletes all items in the listbox
		virtual void clear();

		//! returns id of selected item. returns -1 if no item is selected.
		virtual s32 getSelected();

		//! sets the selected item. Set this to -1 if no item should be selected
		virtual void setSelected(s32 id);
		
		/////////////////////////////////////////////////////////
		/// IGUIElement
		/////////////////////////////////////////////////////////
		
		//! Returns parent of this element.
		irr::gui::IGUIElement* getParent();


		//! Returns the relative rectangle of this element.
		irr::core::rect<s32> getRelativePosition();
		


		//! Sets the relative rectangle of this element.
		void setRelativePosition(irr::core::rect<s32>& r);


		//! Returns the absolute rectangle of element.
		irr::core::rect<s32> getAbsolutePosition();


		//! Updates the absolute position.
		virtual void updateAbsolutePosition();
		


		//! Returns the child element, which is at the position of the point.
		irr::gui::IGUIElement* getElementFromPoint(irr::core::position2d<s32>& point);
		


		//! Adds a GUI element as new child of this element.
		virtual void addChild(irr::gui::IGUIElement* child);
		


		//! Removes a child.
		virtual void removeChild(irr::gui::IGUIElement* child);
		


		//! Removes this element.
		virtual void remove();
		


		//! Draws the element and its children.
		virtual void draw();
		


		//! Moves this element.
		virtual void move(irr::core::position2d<s32> absoluteMovement);
		


		//! Returns true if element is visible.
		virtual bool isVisible();
		



		//! Sets the visible state of this element.
		virtual void setVisible(bool visible);
		


		//! Returns true if element is enabled.
		virtual bool isEnabled();
		


		//! Sets the enabled state of this element.
		virtual void setEnabled(bool enabled);
		


		//! Sets the new caption of this element.
		virtual void setText(wchar_t* text);
		


		//! Returns caption of this element.
		virtual wchar_t* getText();
		


		//! Returns id. Can be used to identify the element.
		virtual s32 getID();
		

		//! Sets the id of this element
		virtual void setID(s32 id);
		


		//! Called if an event happened.
		virtual bool OnEvent(irr::SEvent event);
		


		//! Brings a child to front
		//! \return Returns true if successful, false if not.
		virtual bool bringToFront(irr::gui::IGUIElement* element);
		

		//! Returns list with children of this element
		//virtual irr::core::list<IGUIElement*>& getChildren();
		

		//! Finds the first element with the given id.
		//! \param id: Id to search for.
		//! \param searchchildren: Set this to true, if also children of this 
		//! element may contain the element with the searched id and they 
		//! should be searched too.
		//! \return Returns the first element with the given id. If no element
		//! with this id was found, 0 is returned.
		virtual irr::gui::IGUIElement* getElementFromId(s32 id, bool searchchildren) ;
		
		irr::gui::EGUI_ELEMENT_TYPE getType();
		
		//////////////////////////////////////////////////////////////////////////////////////	
		//IUnknown
		//////////////////////////////////////////////////////////////////////////////////////
		
		virtual void grab();
		virtual bool drop();
		c8* getDebugName();		
		

	};


} // end namespace gui
} // end namespace irr


$[

local _addItem = irr.gui.IGUIListBox.addItem 
function irr.gui.IGUIListBox:addItem(text)
	text = text or ""
	local txt = irr.cast.to_wchar_t_ptr(text)
	local ret = _addItem(self, txt)
	irr.cast.delete_wchar_t_ptr(txt)
	return ret
end

local _setSelected = irr.gui.IGUIListBox.setSelected
function irr.gui.IGUIListBox:setSelected(id)
	id = id or -1
	return _setSelected(self, id)
end
	
irr.gui.IGUIListBox.setText = irr.gui.IGUIElement.setText
irr.gui.IGUIListBox.getText = irr.gui.IGUIElement.getText
	
$]
