// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h


namespace irr
{
namespace scene
{

//! A particle emitter for using with particle systems.
/** A Particle emitter emitts new particles into a particle system.
*/
class IrrLuaIParticleEmitter : public IParticleAffector
{
public:

	//! destructor
	virtual ~IParticleEmitter();

	//! Prepares an array with new particles to emitt into the system
	//! and returns how much new particles there are.
	//! \param now: Current time.
	//! \param timeSinceLastCall: Time elapsed since last call, in milliseconds.
	//! \param outArray: Pointer which will point to the array with the new 
	//! particles to add into the system.
	//! \return Returns amount of new particles in the array. Can be 0.
	virtual s32 emitt(u32 now, u32 timeSinceLastCall, SParticle*& outArray);

	////////////////////////
	// IUnknown
	
	virtual void grab();
	virtual bool drop();

	////////////////////////
	// IrrLua stuff

	void *GetProxy();

};

} // end namespace scene
} // end namespace irr


$[

irr.__iparticleemitterproxy = {}

function irr.scene.createIParticleEmitter(def)
	local o = {}
	for i,v in pairs(def) do o[i] = v end
	o.__c_class = irr.scene.IrrLuaIParticleEmitter:new()
	tolua.inherit(o, o.__c_class)
	tolua.takeownership(o)
	o.__index = function (t, k) return rawget(t,"__c_class")[k] end	
	setmetatable(o, o)	
	irr.__iparticleemitterproxy[o.__c_class:GetProxy()] = o
	return o  
end


$]

