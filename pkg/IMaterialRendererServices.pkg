// Copyright (C) 2002-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the "Irrlicht Engine".
// For conditions of distribution and use, see copyright notice in irrlicht.h


namespace irr
{
namespace video  
{

//! Interface providing some methods for changing advanced, internal states of a IVideoDriver.
class IMaterialRendererServices
{
public: 

	//! destructor
	virtual ~IMaterialRendererServices();

	//! Can be called by an IMaterialRenderer to make its work easier.
	//! Sets all basic renderstates if needed.
	//! Basic render states are diffuse, ambient, specular, and emissive color, specular power,
	//! bilinear and trilinear filtering, wireframe mode,
	//! grouraudshading, lighting, zbuffer, zwriteenable, backfaceculling and fog enabling.
	virtual void setBasicRenderStates(irr::video::SMaterial& material, 
		irr::video::SMaterial& lastMaterial,
		bool resetAllRenderstates);

	//! Sets a constant for the vertex shader based on a name. This can be used if you used
	//! a high level shader language like GLSL or HLSL to create a shader. Example: If you
	//! created a shader which has variables named 'mWorldViewProj' (containing the 
	//! WorldViewProjection matrix) and another one named 'fTime' containing one float, 
	//! you can set them in your IShaderConstantSetCallBack derived class like this:
	//! \code
	//! virtual void OnSetConstants(video::IMaterialRendererServices* services, s32 userData)
	//! {
	//! 	video::IVideoDriver* driver = services->getVideoDriver();
	//! 
	//! 	float time = (float)os::Timer::getTime()/100000.0f;
	//! 	services->setVertexShaderConstant("fTime", &time, 1);
	//! 
	//! 	core::matrix4 worldViewProj(driver->getTransform(video::ETS_PROJECTION));
	//! 	worldViewProj *= driver->getTransform(video::ETS_VIEW);
	//! 	worldViewProj *= driver->getTransform(video::ETS_WORLD);
	//! 	services->setVertexShaderConstant("mWorldViewProj", worldViewProj.M, 16);
	//! }
	//! \endcode
	//! \param name: Name of the variable
	//! \param floats: Pointer to array of floats
	//! \param count: Amount of floats in array.
	//! \return: Returns true if successful.
	virtual bool setVertexShaderConstant(c8* name, f32* floats, int count);

	//! Sets a vertex shader constant. Can be used if you created a shader using 
	//! pixel/vertex shader assembler or ARB_fragment_program or ARB_vertex_program.
	//! \param data: Data to be set in the constants
	//! \param startRegister: First register to be set
	//! \param constantAmount: Amount of registers to be set. One register consists of 4 floats.
	virtual void setVertexShaderConstant(f32* data, s32 startRegister, s32 constantAmount);

	//! Sets a constant for the pixel shader based on a name. This can be used if you used
	//! a high level shader language like GLSL or HLSL to create a shader. See 
	//! setVertexShaderConstant() for an example on how to use this.
	//! \param name: Name of the variable
	//! \param floats: Pointer to array of floats
	//! \param count: Amount of floats in array.
	//! \return: Returns true if successful.
	virtual bool setPixelShaderConstant(c8* name, const f32* floats, int count);

	//! Sets a pixel shader constant. Can be used if you created a shader using 
	//! pixel/vertex shader assembler or ARB_fragment_program or ARB_vertex_program.
	//! \param data: Data to be set in the constants
	//! \param startRegister: First register to be set.
	//! \param constantAmount: Amount of registers to be set. One register consists of 4 floats.
	virtual void setPixelShaderConstant(f32* data, s32 startRegister, s32 constantAmount);

	//! Returns a pointer to the IVideoDriver interface
	virtual irr::video::IVideoDriver* getVideoDriver();
};

} // end namespace video
} // end namespace irr

$[

local _setVertexShaderConstant = irr.video.IMaterialRendererServices.setVertexShaderConstant
function irr.video.IMaterialRendererServices:setVertexShaderConstant(arg1, arg2, arg3)
	if type(arg1) == "string" then
		local count = arg3 or table.getn(arg2)
		if count < 1 then 
			count = 16 
		end		
		return irr.video.IrrLuaSetVertexShaderConstant1(self, arg1, count, arg2)
	else
		local count = table.getn(arg1)
		if count < 1 then 
			count = 16 
		end
		arg3 = arg3 or count
		return irr.video.IrrLuaSetVertexShaderConstant2(self, arg2, arg3, count, arg1)	
	end	
end	
	
local _setPixelShaderConstant = irr.video.IMaterialRendererServices.setPixelShaderConstant
function irr.video.IMaterialRendererServices:setPixelShaderConstant(arg1, arg2, arg3)
	if type(arg1) == "string" then
		local count = arg3 or table.getn(arg2)
		if count < 1 then 
			count = 16 
		end		
		return irr.video.IrrLuaSetPixelShaderConstant1(self, arg1, count, arg2)
	else
		local count = table.getn(arg1)
		if count < 1 then 
			count = 16 
		end
		arg3 = arg3 or count 
		return irr.video.IrrLuaSetPixelShaderConstant2(self, arg2, arg3, count, arg1)	
	end	
end	

$]

