// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h


namespace irr
{
namespace io
{

	//! Interface providing methods for making it easier to write XML files.
	/** This XML Writer only writes UTF-16 xml files, because these are parsed 
	faster than all other formats by IXMLReader.
	*/
	class IXMLWriter : public irr::IUnknown
	{
	public:

		//! Destructor
		virtual ~IXMLWriter() {};

		//! Writes a xml 1.0 header like <?xml version="1.0"?>. This should
		//! always be called before writing anything other, because also the
		//! text file header for unicode texts is written out with this method.
		virtual void writeXMLHeader();

		//! Writes an xml element with maximal 5 attributes like <foo /> or
		//! <foo optAttr="value" />. The element can be empty or not.
		//! \param name: Name of the element
		//! \param empty: Specifies if the element should be empty. Like <foo />. If
		//! You set this to false, something like this is written instead: <foo>.
        virtual void writeElement(wchar_t* name, bool empty,
			wchar_t* attr1Name, wchar_t* attr1Value,
			wchar_t* attr2Name, wchar_t* attr2Value,
			wchar_t* attr3Name, wchar_t* attr3Value,
			wchar_t* attr4Name, wchar_t* attr4Value,
			wchar_t* attr5Name, wchar_t* attr5Value);

		//! Writes a comment into the xml file
		virtual void writeComment(wchar_t* comment);

		//! Writes the closing tag for an element. Like </foo>
		virtual void writeClosingTag(wchar_t* name);

		//! Writes a text into the file. All occurrences of special characters like
		//! & (&amp;), < (&lt;), > (&gt;), and " (&quot;) are automaticly replaced.
		virtual void writeText(wchar_t* text);

		//! Writes a line break
		virtual void writeLineBreak();
		
		//////////////////////////////////////////////////////////////////////////////////////	
		//IUnknown
		//////////////////////////////////////////////////////////////////////////////////////
		
		virtual void grab();
		virtual bool drop();
		c8* getDebugName();		
	};

} // end namespace irr
} // end namespace io


