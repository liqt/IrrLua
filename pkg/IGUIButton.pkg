// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h



namespace irr
{

namespace video
{
	class ITexture;
}

namespace gui
{
	class IGUIFont;

	//! GUI Button interface.
	class IGUIButton : public irr::gui::IGUIElement
	{
	public:

		//! constructor
		//IGUIButton(IGUIEnvironment* environment, IGUIElement* parent, s32 id, core::rect<s32> rectangle);

		//! destructor
		~IGUIButton();

		//! Sets another skin independent font.
		//! If this is set to zero, the button uses the font of the skin.
		//! \param font: New font to set.
		virtual void setOverrideFont(irr::gui::IGUIFont* font);

		//! Sets an image which should be displayed on the button when it is in
		//! normal state. 
		//! \param image: Image to be displayed
		virtual void setImage(irr::video::ITexture* image);

		//! Sets an image which should be displayed on the button when it is in
		//! normal state. 
		//! \param image: Texture containing the image to be displayed
		//! \param rect: Position in the texture, where the image is located
		virtual void setImage(irr::video::ITexture* image, irr::core::rect<s32>& pos);

		//! Sets an image which should be displayed on the button when it is in
		//! pressed state. If no images is specified for the pressed state via
		//! setPressedImage(), this image is also drawn in pressed state.
		//! \param image: Image to be displayed
		virtual void setPressedImage(irr::video::ITexture* image);

		//! Sets an image which should be displayed on the button when it is in
		//! pressed state. 
		//! \param image: Texture containing the image to be displayed
		//! \param rect: Position in the texture, where the image is located
		virtual void setPressedImage(irr::video::ITexture* image, irr::core::rect<s32>& pos);

		//! Sets if the button should behave like a push button. Which means it
		//! can be in two states: Normal or Pressed. With a click on the button,
		//! the user can change the state of the button.
		virtual void setIsPushButton(bool isPushButton);

		//! Sets the pressed state of the button if this is a pushbutton
		virtual void setPressed(bool pressed);

		//! Returns if the button is currently pressed
		virtual bool isPressed();
		
		//! Sets if the alpha channel should be used for drawing images on the button (default is false)
		virtual void setUseAlphaChannel(bool useAlphaChannel);

		//! Returns if the alpha channel should be used for drawing images on the button
		virtual bool getUseAlphaChannel();
	
		
		/////////////////////////////////////////////////////////
		/// IGUIElement
		/////////////////////////////////////////////////////////
		
		//! Returns parent of this element.
		irr::gui::IGUIElement* getParent();


		//! Returns the relative rectangle of this element.
		irr::core::rect<s32> getRelativePosition();
		


		//! Sets the relative rectangle of this element.
		void setRelativePosition(irr::core::rect<s32>& r);


		//! Returns the absolute rectangle of element.
		irr::core::rect<s32> getAbsolutePosition();


		//! Updates the absolute position.
		virtual void updateAbsolutePosition();
		


		//! Returns the child element, which is at the position of the point.
		irr::gui::IGUIElement* getElementFromPoint(irr::core::position2d<s32>& point);
		


		//! Adds a GUI element as new child of this element.
		virtual void addChild(irr::gui::IGUIElement* child);
		


		//! Removes a child.
		virtual void removeChild(irr::gui::IGUIElement* child);
		


		//! Removes this element.
		virtual void remove();
		


		//! Draws the element and its children.
		virtual void draw();
		


		//! Moves this element.
		virtual void move(irr::core::position2d<s32> absoluteMovement);
		


		//! Returns true if element is visible.
		virtual bool isVisible();
		



		//! Sets the visible state of this element.
		virtual void setVisible(bool visible);
		


		//! Returns true if element is enabled.
		virtual bool isEnabled();
		


		//! Sets the enabled state of this element.
		virtual void setEnabled(bool enabled);
		


		//! Sets the new caption of this element.
		virtual void setText(wchar_t* text);
		


		//! Returns caption of this element.
		virtual wchar_t* getText();
		


		//! Returns id. Can be used to identify the element.
		virtual s32 getID();
		

		//! Sets the id of this element
		virtual void setID(s32 id);
		


		//! Called if an event happened.
		virtual bool OnEvent(irr::SEvent event);
		


		//! Brings a child to front
		//! \return Returns true if successful, false if not.
		virtual bool bringToFront(irr::gui::IGUIElement* element);
		

		//! Returns list with children of this element
		//virtual irr::core::list<IGUIElement*>& getChildren();
		

		//! Finds the first element with the given id.
		//! \param id: Id to search for.
		//! \param searchchildren: Set this to true, if also children of this 
		//! element may contain the element with the searched id and they 
		//! should be searched too.
		//! \return Returns the first element with the given id. If no element
		//! with this id was found, 0 is returned.
		virtual irr::gui::IGUIElement* getElementFromId(s32 id, bool searchchildren) ;
		
		irr::gui::EGUI_ELEMENT_TYPE getType();

		//////////////////////////////////////////////////////////////////////////////////////	
		//IUnknown
		//////////////////////////////////////////////////////////////////////////////////////
		
		virtual void grab();
		virtual bool drop();
		c8* getDebugName();
	};


} // end namespace gui
} // end namespace irr


$[

irr.gui.IGUIButton.setText = irr.gui.IGUIElement.setText
irr.gui.IGUIButton.getText = irr.gui.IGUIElement.getText

$]

